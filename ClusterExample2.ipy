#!/usr/bin/env ipython
'''
Simple program to execute code in parallel using IPython
To be used on ManeFrame using Slurm
'''
import argparse
parser = argparse.ArgumentParser(description='Country Number')
parser.add_argument('i', action="store", type=int)
args = parser.parse_args()
print(args)
i=int(args.i)

from IPython.parallel import Client
import pandas as pd
import numpy as np

# Setup the clients, direct views, adn balanced views
c = Client()
c.ids
dview = c[:]
view = c.load_balanced_view()
dview.activate()

# Run Some things in parallel
%px import os       # imports on all clients
%px import socket   # imports on all clients

%px pid = os.getpid()
%px cpu = socket.gethostname()

# See outputs
print(dview['pid'])
print(dview['cpu'])

# Bring results to master
pid=dview['pid']
cpu=dview['cpu']

# Export cpu and pid to a file
df=pd.DataFrame(np.array([cpu,pid]).transpose(),columns=['cpu','pid'])
df.to_csv('hosts_pids.csv', index=False)

print(i)

def get_host_free_memory(client):
    """Free memory on each host of the cluster in MB."""
    all_engines = client[:]
    def hostname():
        import socket
        return socket.gethostname()

    hostnames = all_engines.apply(hostname).get_dict()
    one_engine_per_host = dict((hostname, engine_id)
                               for engine_id, hostname
                               in hostnames.items())

    def host_free_memory():
        import psutil
        return psutil.virtual_memory().free / 1e6


    one_engine_per_host_ids = list(one_engine_per_host.values())
    host_mem = client[one_engine_per_host_ids].apply(
        host_free_memory).get_dict()

    return dict((hostnames[eid], m) for eid, m in host_mem.items())

get_host_free_memory(c)
